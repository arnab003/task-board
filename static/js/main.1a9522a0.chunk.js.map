{"version":3,"sources":["components/Card.js","components/AddCard.js","components/Column.js","components/Navbar.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","editing","content","deleteTask","props","card","id","columnId","setCardDimention","dim","el","elem","getBoundingClientRect","event","preventDefault","updatedContent","this","textInput","value","trim","updateCardContent","setEditing","setState","handleCardDragStart","className","onSubmit","e","type","autoFocus","ref","input","defaultValue","onClick","target","innerHTML","draggable","onDragStart","title","Component","AddCard","cardContent","addNewCard","aria-label","Column","cards","map","index","key","column","deleteColumn","Navbar","rel","href","Main","getDimention","cardId","dimention","JSON","parse","localStorage","getItem","cardFound","i","length","dimentionArr","dimObj","push","setItem","stringify","tasks","newCard","Date","valueOf","forEach","Number","currentTarget","diff","pageY","top","dragInfo","fromColumn","dragStartPageY","handleDragOver","arraymove","arr","fromIndex","toIndex","element","splice","handleDrop","cardY","yVal","cardsArray","find","indexOfCard","findIndex","positionIndex","bottom","removeItem","newCardArr","filter","columnEditing","task","onDragOver","onDrop","addColumn","onSubmitListName","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a9522a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Card extends Component {\n  state = {\n    editing: false,\n    content: ''\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const updatedContent = this.textInput.value.trim();\n    const columnId = this.props.columnId;\n    if (updatedContent && this.props.updateCardContent) {\n      this.props.updateCardContent(updatedContent, columnId, this.props.card.id);\n      this.setEditing(false);\n    }\n    this.textInput.value = '';\n  }\n\n  deleteTask = () => {\n    this.props.deleteTask(this.props.card.id, this.props.columnId);\n  }\n\n  setEditing(editing, content) {\n    this.setState({\n      editing,\n      content\n    });\n  }\n\n  setCardDimention = () => {\n    let el = this.elem,\n      dim;\n    if (el) {\n      dim = el.getBoundingClientRect();\n      this.props.setCardDimention(this.props.card.id, dim);\n    }\n  }\n\n  componentDidMount() {\n    this.setCardDimention();\n  }\n\n  componentDidUpdate() {\n    this.setCardDimention();\n  }\n\n  render() {\n    const { card, handleCardDragStart } = this.props;\n    if (this.state.editing) {\n      return (\n        <div>\n          <form className=\"task-card add-task-form\" onSubmit={(e) => this.onSubmit(e)}>\n            <input type=\"text\" autoFocus ref={input => this.textInput = input} defaultValue={this.state.content} />\n            <div>\n              <button className=\"waves-effect waves-light btn confirm-btn add-update-button \">Update</button>\n              <button className=\"waves-effect waves-light btn confirm-btn cancel-button red darken-1\" onClick={() => this.setEditing(false)}>Cancel</button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <div className=\"task-card z-depth-2\" onClick={(e) => this.setEditing(true, e.target.innerHTML)}\n          ref={elem => this.elem = elem}\n          draggable=\"true\"\n          id={card.id}\n          onDragStart={handleCardDragStart}\n        >\n          {card.content}\n        </div>\n        <div onClick={this.deleteTask}><a className=\"del-task\" title=\"Delete Task\"><i className=\"small material-icons\">delete_forever</i></a></div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\n\nexport default class AddCard extends Component {\n  state = {\n    editing: false\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n    const cardContent = this.textInput.value.trim();\n    const columnId = this.props.columnId;\n    if (cardContent && this.props.addNewCard) {\n      this.props.addNewCard(cardContent, columnId);\n      this.setEditing(false);\n    }\n    this.textInput.value = '';\n  }\n\n  setEditing(editing) {\n    this.setState({\n      editing\n    });\n  }\n\n  render() {\n    if (!this.state.editing) {\n      return (\n        <div onClick={() => this.setEditing(true)}>\n          <a className=\"waves-effect waves-light btn-small light-green darken-2\"><i className=\"material-icons left\">add</i>Add Task</a>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <form className=\"task-card add-task-form\" onSubmit={(e) => this.onSubmit(e)}>\n          <input type=\"text\" autoFocus ref={input => this.textInput = input} aria-label=\"Add a task\" />\n          <div>\n            <button className=\"waves-effect waves-light btn confirm-btn add-update-button \">Add Task</button>\n            <button className=\"waves-effect waves-light btn confirm-btn cancel-button red darken-1\" onClick={() => this.setEditing(false)}>Cancel</button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Card from './Card';\nimport AddCard from './AddCard';\n\nconst Column = (props) => {\n  const cards = props.cards && props.cards.map((card, index) => {\n    return (\n      <li key={index}>\n        <Card card={card}\n          columnId={props.id}\n          updateCardContent={props.updateCardContent}\n          setCardDimention={props.setCardDimention}\n          handleCardDragStart={props.handleCardDragStart}\n          deleteTask={props.deleteTask}\n        />\n      </li>\n    );\n  });\n\n  return (\n    <div>\n      <ul className=\"list\">\n        <li>\n          <div>\n            <div className=\"column-header\"><h5 className=\"name-header\">{props.column}</h5></div>\n            <div className=\"column-header-del\"><a className=\"del-task\" title=\"Delete List\" onClick={props.deleteColumn}><i className=\"material-icons\">close</i></a></div>\n          </div>\n        </li>\n        <li>\n          <div className=\"partition\"></div>\n        </li>\n        {cards}\n        <li className=\"add-list-wrapper\">\n          <AddCard columnId={props.id} addNewCard={props.addNewCard} />\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Column;","import React from 'react';\n\nconst Navbar = () => {\n  return (\n    <div className=\"navbar-fixed\">\n      <nav>\n        <div className=\"nav-wrapper grey darken-4 z-depth-2\">\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/arnab003/task-board\" className=\"brand-logo\">Kanban Board</a>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Column from './Column';\nimport Navbar from './Navbar';\n\nexport default class Main extends Component {\n\n  constructor(props) {\n    super(props);\n\n    if (localStorage.getItem('tasks')) {\n      const tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.state = {\n        tasks,\n        columnEditing: JSON.parse(localStorage.getItem('columnEditing'))\n      };\n    } else {\n      this.state = {\n        tasks: [{\n          column: 'ToDo',\n          id: 0,\n          cards: [{\n            content: 'Sample Task 1',\n            columnId: 0,\n            id: 0\n          },\n          {\n            content: 'Sample Task 2',\n            columnId: 0,\n            id: 1\n          }]\n        },\n        {\n          column: 'InProgress',\n          id: 1,\n          cards: [{\n            content: 'Sample Task 3',\n            columnId: 1,\n            id: 2\n          }]\n        },\n        {\n          column: 'Done',\n          id: 2,\n          cards: [{\n            content: 'Sample Task 4',\n            columnId: 2,\n            id: 3\n          }]\n        }],\n        columnEditing: false\n      };\n      localStorage.setItem('tasks', JSON.stringify(this.state.tasks));\n      localStorage.setItem('dimention', JSON.stringify([]));\n      localStorage.setItem('columnEditing', JSON.stringify(false));\n    }\n  }\n\n  // fetch the array of card ids and their respective dimention from local storage\n  getDimention = (cardId) => {\n    const dimention = JSON.parse(localStorage.getItem('dimention'));\n    let cardFound = false;\n\n    for (var i = 0; i < dimention.length; i++) {\n      if (dimention[i].id === cardId) {\n        cardFound = true;\n        break;\n      }\n    }\n    if (cardFound) {\n      return {\n        dimentionArr: dimention,\n        index: i\n      };\n    }\n  }\n\n  // stores the array of card ids and their respective dimention in local storage\n  setCardDimention = (cardId, dim) => {\n    var dimentionArr = JSON.parse(localStorage.getItem('dimention'));\n\n    let dimObj = this.getDimention(cardId);\n\n    if (dimObj) {\n      dimentionArr = dimObj.dimentionArr;\n      dimentionArr[dimObj.index].dimention = dim;\n    } else {\n      dimentionArr.push({\n        id: cardId,\n        dimention: dim\n      });\n    }\n    localStorage.setItem('dimention', JSON.stringify(dimentionArr));\n  }\n\n  // add new task card\n  addNewCard = (content, columnId) => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    const newCard = {\n      content,\n      columnId,\n      id: new Date().valueOf()\n    }\n\n    tasks[columnId].cards.push(newCard);\n\n    this.setState({\n      ...this.state,\n      tasks\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  // update card content (editable card)\n  updateCardContent = (content, columnId, cardId) => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    tasks[columnId].cards.forEach((card) => {\n      if (card.id === cardId) {\n        card.content = content;\n      }\n    });\n    this.setState({\n      ...this.state,\n      tasks\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  // stores essential info during drag start for inserting cards into proper order\n  handleCardDragStart = (e, columnId) => {\n    const dimObj = this.getDimention(Number(e.currentTarget.id));\n    const diff = e.pageY - dimObj.dimentionArr[dimObj.index].dimention.top;\n    const dragInfo = {\n      cardId: e.currentTarget.id,\n      fromColumn: columnId,\n      dragStartPageY: e.pageY,\n      diff,\n    }\n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  handleDragOver = (e) => {\n    e.preventDefault();\n  }\n\n  // helper function to change the position of an array element\n  arraymove = (arr, fromIndex, toIndex) => {\n    var element = arr[fromIndex];\n    arr.splice(fromIndex, 1);\n    arr.splice(toIndex, 0, element);\n  }\n\n  // drop event handler to place the task card after dropping in the same list or different list\n  handleDrop = (e, columnId) => {\n    const dragInfo = JSON.parse(localStorage.getItem('dragInfo'));\n    const cardY = dragInfo.yVal;\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n\n    const cardsArray = tasks[dragInfo.fromColumn].cards;\n    const card = cardsArray.find(card => card.id === Number(dragInfo.cardId));\n    const indexOfCard = cardsArray.findIndex(card => card.id === Number(dragInfo.cardId));\n\n    let dimObj, bottom, positionIndex = tasks[columnId].cards.length;\n    for (let i = 0; i < tasks[columnId].cards.length; i++) {\n      dimObj = this.getDimention(Number(tasks[columnId].cards[i].id));\n      bottom = (dimObj.dimentionArr[dimObj.index].dimention.bottom);\n      if (bottom > cardY) {\n        positionIndex = i;\n        break;\n      }\n    }\n\n    if (columnId === Number(dragInfo.fromColumn)) {\n      if (positionIndex !== indexOfCard && positionIndex !== (indexOfCard + 1)) {\n        this.arraymove(tasks[dragInfo.fromColumn].cards, indexOfCard, indexOfCard - positionIndex < 0 ? positionIndex - 1 : positionIndex);\n      }\n    } else {\n      tasks[dragInfo.fromColumn].cards.splice(indexOfCard, 1);\n      tasks[columnId].cards.splice(positionIndex, 0, { ...card, columnId: Number(columnId) });\n    }\n\n    this.setState({\n      ...this.state,\n      tasks\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.removeItem('dragInfo');\n  }\n\n  // tracks the mouse coordinate to help in placing the card tasks in proper order after drop\n  handleDragOver = (e) => {\n    e.preventDefault();\n    const dragInfo = JSON.parse(localStorage.getItem('dragInfo'));\n    dragInfo.yVal = e.pageY - dragInfo.diff;\n    localStorage.setItem('dragInfo', JSON.stringify(dragInfo));\n  }\n\n  // delete a card task\n  deleteTask = (cardId, columnId) => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    const newCardArr = tasks[columnId].cards.filter((card) => {\n      return card.id !== cardId;\n    });\n    tasks[columnId].cards = newCardArr;\n    this.setState({\n      ...this.state,\n      tasks\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  deleteColumn = (columnId) => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n\n    delete tasks[columnId];\n\n    this.setState({\n      ...this.state,\n      tasks\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  // flag set in state to open form for adding a list\n  setEditing(columnEditing) {\n    this.setState({\n      ...this.state,\n      columnEditing\n    });\n    localStorage.setItem('columnEditing', JSON.stringify(columnEditing));\n  }\n\n  // form submit handler for adding a column\n  onSubmitListName(event) {\n    event.preventDefault();\n    const content = this.textInput.value.trim();\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n\n    if (content) {\n      tasks.push({\n        column: content,\n        id: tasks.length,\n        cards: []\n      });\n    }\n    this.setState({\n      tasks,\n      columnEditing: false\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    localStorage.setItem('columnEditing', JSON.stringify(false));\n    this.textInput.value = '';\n  }\n\n  render() {\n    const tasks = this.state.tasks.map((task, index) => {\n      return task ? (\n        <div className=\"transparent-wrapper\" key={index} onDragOver={this.handleDragOver} onDrop={(e) => this.handleDrop(e, task.id)}>\n          <li className=\"column-wrapper z-depth-3\">\n            <Column {...task}\n              setCardDimention={this.setCardDimention}\n              updateCardContent={this.updateCardContent}\n              handleCardDragStart={(e) => this.handleCardDragStart(e, task.id)}\n              addNewCard={this.addNewCard}\n              deleteTask={this.deleteTask}\n              deleteColumn={() => this.deleteColumn(task.id)}\n            />\n          </li>\n        </div>\n      ) : null;\n    });\n\n    const addColumn = this.state.columnEditing ? (\n      <div>\n        <form className=\"task-card add-column-form\" onSubmit={(e) => this.onSubmitListName(e)}>\n          <input type=\"text\" autoFocus ref={input => this.textInput = input} aria-label=\"Add a List\" />\n          <div>\n            <button className=\"waves-effect waves-light btn confirm-btn add-update-button \">Add List</button>\n            <button className=\"waves-effect waves-light btn confirm-btn cancel-button red darken-1\" onClick={() => this.setEditing(false)}>Cancel</button>\n          </div>\n        </form>\n      </div>\n    ) : (\n        <div onClick={() => this.setEditing(true)}>\n          <a className=\"btn-floating btn waves-effect waves-light light-green darken-2 z-depth-2\"><i className=\"material-icons\">add</i></a>\n        </div>\n      );\n\n\n    return (\n      <div>\n        <Navbar />\n        <div onDragOver={this.handleDragOver}>\n          <div className=\"wrapper-cont\">\n            <ul className=\"task-column\">\n              {tasks}\n              <li className=\"column-wrapper add-column\">\n                {addColumn}\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n","import React from 'react';\nimport Main from './components/Main';\nimport \"materialize-css/dist/css/materialize.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}